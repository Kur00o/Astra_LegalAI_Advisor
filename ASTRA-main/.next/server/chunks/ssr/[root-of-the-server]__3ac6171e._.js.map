{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/ai/flows/analyze-legal-clauses.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A legal clause analysis AI agent.\n *\n * - analyzeLegalClauses - A function that handles the legal clause analysis process.\n * - AnalyzeLegalClausesInput - The input type for the analyzeLegalClauses function.\n * - AnalyzeLegalClausesOutput - The return type for the analyzeLegalClauses function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeLegalClausesInputSchema = z.object({\n  documentText: z\n    .string()\n    .describe('The text content of the legal document to analyze.'),\n  jurisdiction: z.string().describe('The legal jurisdiction to consider for the analysis.'),\n});\nexport type AnalyzeLegalClausesInput = z.infer<typeof AnalyzeLegalClausesInputSchema>;\n\nconst AnalyzeLegalClausesOutputSchema = z.object({\n  clauseAnalysis: z.array(\n    z.object({\n      clause: z.string().describe('The specific legal clause being analyzed.'),\n      riskLevel: z\n        .enum(['low', 'medium', 'high'])\n        .describe('The risk level associated with this clause.'),\n      explanation: z\n        .string()\n        .describe('An explanation of the potential risks or unusual terms in the clause.'),\n    })\n  ).describe('An analysis of the legal clauses in the document.'),\n});\nexport type AnalyzeLegalClausesOutput = z.infer<typeof AnalyzeLegalClausesOutputSchema>;\n\nexport async function analyzeLegalClauses(input: AnalyzeLegalClausesInput): Promise<AnalyzeLegalClausesOutput> {\n  return analyzeLegalClausesFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzeLegalClausesPrompt',\n  input: {schema: AnalyzeLegalClausesInputSchema},\n  output: {schema: AnalyzeLegalClausesOutputSchema},\n  prompt: `You are an AI legal assistant specializing in analyzing legal clauses to identify potential risks or unusual terms.\n\n  Your analysis must be tailored to the laws and regulations of the following jurisdiction: {{{jurisdiction}}}.\n\n  Analyze the following legal document and identify potentially risky or unusual clauses. For each clause, determine the risk level (low, medium, or high) and provide a detailed explanation based on the specified jurisdiction.\n\n  Document Text: {{{documentText}}}\n  `,\n});\n\nconst analyzeLegalClausesFlow = ai.defineFlow(\n  {\n    name: 'analyzeLegalClausesFlow',\n    inputSchema: AnalyzeLegalClausesInputSchema,\n    outputSchema: AnalyzeLegalClausesOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;IACZ,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACrB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,WAAW,uIAAA,CAAA,IAAC,CACT,IAAI,CAAC;YAAC;YAAO;YAAU;SAAO,EAC9B,QAAQ,CAAC;QACZ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACd,IACA,QAAQ,CAAC;AACb;AAGO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;EAOT,CAAC;AACH;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/ai/flows/legal-chatbot.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A legal chatbot that can answer questions with multimodal context.\n *\n * - legalChatbot - A function that handles a chatbot conversation turn.\n * - LegalChatbotInput - The input type for the legalChatbot function.\n * - LegalChatbotOutput - The return type for the legalChatbot function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst MessageSchema = z.object({\n    role: z.enum(['user', 'assistant', 'tool']),\n    content: z.string(),\n    filePreview: z.string().optional(),\n    fileName: z.string().optional(),\n    name: z.string().optional(), // For tool requests/responses\n});\n\nconst LegalChatbotInputSchema = z.object({\n  query: z.string().describe('The user\\'s current question or message.'),\n  jurisdiction: z.string().describe('The legal jurisdiction to consider for the response.'),\n  documentDataUri: z.string().optional().describe(\n    \"An optional document or image file provided by the user for context, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n  ),\n  history: z.array(MessageSchema).describe('The history of the conversation so far.'),\n});\nexport type LegalChatbotInput = z.infer<typeof LegalChatbotInputSchema>;\n\nconst LegalChatbotOutputSchema = z.object({\n  response: z.string().describe('The AI\\'s response to the user\\'s query.'),\n});\nexport type LegalChatbotOutput = z.infer<typeof LegalChatbotOutputSchema>;\n\nexport async function legalChatbot(input: LegalChatbotInput): Promise<LegalChatbotOutput> {\n  const response = await legalChatbotFlow(input);\n  return { response };\n}\n\nconst prompt = ai.definePrompt({\n  name: 'legalChatbotPrompt',\n  input: {schema: LegalChatbotInputSchema},\n  prompt: `You are an expert attorney providing legal advice. Your goal is to give direct, actionable answers to the user's questions based on the provided context. Do not include disclaimers about not being a lawyer.\n\n  Your response must be tailored to the laws and regulations of the following jurisdiction: {{{jurisdiction}}}.\n  \n  Current time: ${new Date().toISOString()}\n\n  Conversation History:\n  {{#each history}}\n  {{#if name}}\n  Tool Response ({{name}}): {{content}}\n  {{else}}\n  {{role}}: {{content}}\n  {{/if}}\n  {{/each}}\n  \n  Current User Query: {{{query}}}\n  {{#if documentDataUri}}\n  The user has also provided the following file for context:\n  {{media url=documentDataUri}}\n  {{/if}}\n\n  Please provide a direct and clear legal response to the current user query, respecting the laws of {{{jurisdiction}}}.\n  `,\n});\n\nconst legalChatbotFlow = ai.defineFlow(\n  {\n    name: 'legalChatbotFlow',\n    inputSchema: LegalChatbotInputSchema,\n    outputSchema: z.string(),\n  },\n  async (input) => {\n    \n    const llmResponse = await prompt(input);\n    \n    return llmResponse.text;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAa;KAAO;IAC1C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC7B;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAC7C;IAEF,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ,CAAC;AAC3C;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,aAAa,KAAwB;IACzD,MAAM,WAAW,MAAM,iBAAiB;IACxC,OAAO;QAAE;IAAS;AACpB;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAuB;IACvC,QAAQ,CAAC;;;;gBAIK,EAAE,IAAI,OAAO,WAAW,GAAG;;;;;;;;;;;;;;;;;;EAkBzC,CAAC;AACH;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;AACxB,GACA,OAAO;IAEL,MAAM,cAAc,MAAM,OAAO;IAEjC,OAAO,YAAY,IAAI;AACzB;;;IA5CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzeLegalClauses as '404d258462cfc682c10be9c33c1b2e10068829fd82'} from 'ACTIONS_MODULE0'\nexport {legalChatbot as '40874373e336400d43334f4a7c243302380ee580cd'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 486, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}