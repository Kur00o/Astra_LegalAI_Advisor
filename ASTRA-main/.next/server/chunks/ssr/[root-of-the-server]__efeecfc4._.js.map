{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/ai/config.ts"],"sourcesContent":["\nconst apiKeys = {\n  groq: process.env.GROQ_API_KEY,\n  together: process.env.TOGETHER_AI_API_KEY,\n  huggingface: process.env.HUGGINGFACE_API_KEY,\n  deepseek: process.env.DEEPSEEK_API_KEY,\n  cerebras: process.env.CEREBRAS_API_KEY,\n  bing: process.env.BING_SEARCH_API_KEY,\n  brave: process.env.BRAVE_SEARCH_API_KEY,\n  gemini: process.env.GEMINI_API_KEY,\n};\n\nexport type ApiProvider = keyof typeof apiKeys;\n\nexport function getApiKey(provider: ApiProvider): string | undefined {\n  return apiKeys[provider];\n}\n"],"names":[],"mappings":";;;AACA,MAAM,UAAU;IACd,MAAM,QAAQ,GAAG,CAAC,YAAY;IAC9B,UAAU,QAAQ,GAAG,CAAC,mBAAmB;IACzC,aAAa,QAAQ,GAAG,CAAC,mBAAmB;IAC5C,UAAU,QAAQ,GAAG,CAAC,gBAAgB;IACtC,UAAU,QAAQ,GAAG,CAAC,gBAAgB;IACtC,MAAM,QAAQ,GAAG,CAAC,mBAAmB;IACrC,OAAO,QAAQ,GAAG,CAAC,oBAAoB;IACvC,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAIO,SAAS,UAAU,QAAqB;IAC7C,OAAO,OAAO,CAAC,SAAS;AAC1B","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/ai/flows/deep-search.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A flow for performing deep searches on the web for legal queries.\n *\n * - deepSearch - A function that takes a query, searches the web, and returns related legal clauses.\n * - DeepSearchInput - The input type for the deepSearch function.\n * - DeepSearchOutput - The return type for the deepSearch function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getApiKey } from '../config';\n\n// Input Schema\nconst DeepSearchInputSchema = z.object({\n  query: z.string().describe('The legal query or topic to search for clauses about.'),\n  jurisdiction: z.string().describe('The legal jurisdiction to consider for the search.'),\n  documentDataUri: z.string().optional().describe(\n    \"An optional document or image file for context, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n  ),\n});\nexport type DeepSearchInput = z.infer<typeof DeepSearchInputSchema>;\n\n// Output Schema\nconst RelatedClauseSchema = z.object({\n    clauseText: z.string().describe(\"The exact text of the related legal clause found online.\"),\n    sourceTitle: z.string().describe(\"The title of the source website or document.\"),\n    sourceUrl: z.string().describe(\"The URL where the clause was found.\"),\n    relevance: z.string().describe(\"A brief explanation of how this clause relates to the user's query or document context.\")\n});\n\nconst DeepSearchOutputSchema = z.object({\n  relatedClauses: z.array(RelatedClauseSchema).describe(\"A list of relevant legal clauses discovered from the web search.\")\n});\nexport type DeepSearchOutput = z.infer<typeof DeepSearchOutputSchema>;\n\n\n// The exported function that will be called from the UI\nexport async function deepSearch(input: DeepSearchInput): Promise<DeepSearchOutput> {\n  return deepSearchFlow(input);\n}\n\n// Internal function to perform the web search with Brave\nasync function performWebSearch(query: string, jurisdiction: string): Promise<any> {\n  const braveApiKey = getApiKey('brave');\n  if (!braveApiKey) {\n    throw new Error('BRAVE_SEARCH_API_KEY is not set in environment variables.');\n  }\n\n  // Refine the query for better accuracy\n  const refinedQuery = `${query} legal clause in ${jurisdiction}`;\n\n  const response = await fetch(`https://api.search.brave.com/res/v1/web/search?q=${encodeURIComponent(refinedQuery)}`, {\n    headers: {\n        'Accept': 'application/json',\n        'X-Subscription-Token': braveApiKey,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(`Brave Search API request failed with status ${response.status}`);\n  }\n\n  const data = await response.json();\n  return (data.web?.results || []).map((item: any) => ({\n      title: item.title,\n      url: item.url,\n      snippet: item.description,\n  }));\n}\n\nconst analysisPrompt = ai.definePrompt({\n    name: \"deepSearchClauseAnalysisPrompt\",\n    input: { schema: z.object({ query: z.string(), jurisdiction: z.string(), documentContext: z.string().optional(), searchResults: z.string() }) },\n    output: { schema: DeepSearchOutputSchema },\n    prompt: `You are a highly efficient legal research AI. Your task is to analyze the provided web search results and extract relevant legal clauses based on the user's query and a specific legal jurisdiction.\n\n    Jurisdiction for this search: \"{{jurisdiction}}\"\n    User's Query: \"{{query}}\"\n    \n    {{#if documentContext}}\n    The user has also provided the following document for additional context. Use it to inform the relevance of the clauses you find.\n    Context: {{media url=documentContext}}\n    {{/if}}\n\n    Analyze the search results below. For each relevant result, you must:\n    1. Extract the specific legal clause text.\n    2. Identify the source title and URL.\n    3. Provide a brief explanation of its relevance to the user's query, considering the laws of \"{{jurisdiction}}\".\n    \n    Return a list of these clauses. Focus on accuracy and relevance. Do not summarize; extract the clauses directly.\n\n    Search Results:\n    {{{searchResults}}}\n    `,\n});\n\n\n// Genkit Flow\nconst deepSearchFlow = ai.defineFlow(\n  {\n    name: 'deepSearchFlow',\n    inputSchema: DeepSearchInputSchema,\n    outputSchema: DeepSearchOutputSchema,\n  },\n  async (input) => {\n    const searchData = await performWebSearch(input.query, input.jurisdiction);\n\n    // Use top 5 results for speed and relevance\n    const relevantResults = searchData.slice(0, 5) || [];\n\n    if (relevantResults.length === 0) {\n        return {\n            relatedClauses: []\n        };\n    }\n    \n    const { output } = await analysisPrompt({\n        query: input.query,\n        jurisdiction: input.jurisdiction,\n        documentContext: input.documentDataUri,\n        searchResults: JSON.stringify(relevantResults, null, 2),\n    });\n\n    if (!output) {\n      return {\n        relatedClauses: []\n      };\n    }\n    \n    // Ensure we return valid sources even if the model hallucinates\n    const validClauses = (output.relatedClauses || []).filter((c: any) => c.sourceUrl && c.clauseText);\n\n    return {\n        relatedClauses: validClauses\n    };\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/.next-internal/server/app/dashboard/deep-search/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {deepSearch as '40100f56052889721e190a8d78716bd48368d03340'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/app/dashboard/deep-search/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/deep-search/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/deep-search/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ASTRA/ASTRA-main/src/app/dashboard/deep-search/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/deep-search/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/deep-search/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 476, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}